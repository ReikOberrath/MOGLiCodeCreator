<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=unicode">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 14">
<meta name=Originator content="Microsoft Word 14">
<link rel=File-List href="MOGLi%20Code%20Creator-Dateien/filelist.xml">
<title>MOGLi Code Creator</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Reik</o:Author>
  <o:LastAuthor>Oberrath, Reik</o:LastAuthor>
  <o:Revision>14</o:Revision>
  <o:Created>2012-12-05T10:57:00Z</o:Created>
  <o:LastSaved>2013-02-27T17:40:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>3253</o:Words>
  <o:Characters>20501</o:Characters>
  <o:Company>WIR</o:Company>
  <o:Lines>170</o:Lines>
  <o:Paragraphs>47</o:Paragraphs>
  <o:CharactersWithSpaces>23707</o:CharactersWithSpaces>
  <o:Version>14.00</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]-->
<link rel=themeData href="MOGLi%20Code%20Creator-Dateien/themedata.thmx">
<link rel=colorSchemeMapping
href="MOGLi%20Code%20Creator-Dateien/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>103</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>DE</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
   <w:DontUseIndentAsNumberingTabStop/>
   <w:FELineBreak11/>
   <w:WW11IndentRules/>
   <w:DontAutofitConstrainedTables/>
   <w:AutofitLikeWW11/>
   <w:UnderlineTabInNumList/>
   <w:HangulWidthLikeWW11/>
   <w:UseNormalStyleForList/>
   <w:SplitPgBreakAndParaMark/>
   <w:DontVertAlignCellWithSp/>
   <w:DontBreakConstrainedForcedTables/>
   <w:DontVertAlignInTxbx/>
   <w:Word11KerningPairs/>
   <w:CachedColBalance/>
  </w:Compatibility>
  <w:DocumentVariables>
   <w:dgnword-docGUID>{DBF49B32-A4C4-497B-8F23-F9AAA0155D78}</w:dgnword-docGUID>
   <w:dgnword-eventsink>97890544</w:dgnword-eventsink>
  </w:DocumentVariables>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"
  DefSemiHidden="true" DefQFormat="false" DefPriority="99"
  LatentStyleCount="267">
  <w:LsdException Locked="false" Priority="0" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 9"/>
  <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" Priority="10" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" Priority="11" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" Priority="22" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" Priority="59" SemiHidden="false"
   UnhideWhenUsed="false" Name="Table Grid"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Überschrift 1 Zchn";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	mso-font-kerning:0pt;
	mso-ansi-language:EN-GB;}
h2
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Überschrift 2 Zchn";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	mso-ansi-language:IT;
	font-weight:normal;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-link:"Textkörper-Zeileneinzug Zchn";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-indent:-.6pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
a:link, span.MsoHyperlink
	{mso-style-noshow:yes;
	mso-style-priority:99;
	color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-noshow:yes;
	mso-style-priority:99;
	color:purple;
	mso-themecolor:followedhyperlink;
	text-decoration:underline;
	text-underline:single;}
span.berschrift1Zchn
	{mso-style-name:"Überschrift 1 Zchn";
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Überschrift 1";
	mso-ansi-font-size:14.0pt;
	mso-bidi-font-size:14.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#365F91;
	mso-themecolor:accent1;
	mso-themeshade:191;
	font-weight:bold;}
span.berschrift2Zchn
	{mso-style-name:"Überschrift 2 Zchn";
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Überschrift 2";
	mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	font-weight:bold;}
span.Textkrper-ZeileneinzugZchn
	{mso-style-name:"Textkörper-Zeileneinzug Zchn";
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:Textkörper-Zeileneinzug;
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 2.0cm 70.85pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:7298183;
	mso-list-type:hybrid;
	mso-list-template-ids:-892562338 67567639 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l0:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1
	{mso-list-id:1002585524;
	mso-list-type:hybrid;
	mso-list-template-ids:610554714 67567639 513730476 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l1:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level2
	{mso-level-number-format:roman-upper;
	mso-level-text:"%2\)";
	mso-level-tab-stop:90.0pt;
	mso-level-number-position:left;
	margin-left:90.0pt;
	text-indent:-36.0pt;}
@list l1:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2
	{mso-list-id:1629125201;
	mso-list-type:hybrid;
	mso-list-template-ids:-654912784 67567631 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l2:level1
	{mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3
	{mso-list-id:2007052397;
	mso-list-type:hybrid;
	mso-list-template-ids:-376000008 67567639 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l3:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Normale Tabelle";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1026"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=DE link=blue vlink=purple style='tab-interval:35.4pt'>

<div class=WordSection1>

<h1><a name=c0><span lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:
12.0pt;mso-fareast-font-family:"Times New Roman"'>The </span></a><span
class=SpellE><span style='mso-bookmark:c0'><span lang=EN-GB style='font-size:
14.0pt;mso-bidi-font-size:12.0pt;mso-fareast-font-family:"Times New Roman"'>MOGLi</span></span></span><span
style='mso-bookmark:c0'><span lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:
12.0pt;mso-fareast-font-family:"Times New Roman"'> Code Creator<o:p></o:p></span></span></h1>

<span style='mso-bookmark:c0'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=GramE><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Just another code generator?</span></span><span lang=EN-GB
style='mso-ansi-language:EN-GB'> – NO! – It’s THE Lightweight <span
class=SpellE>autogeneration</span> tool!<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>It is a
small standalone Tool for a quick start into model based development!<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>It’s
written in Java but made to generate more than only Java code.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=SpellE><span lang=EN-GB style='mso-ansi-language:
EN-GB'>MOGLi</span></span><span lang=EN-GB style='mso-ansi-language:EN-GB'> stands
for the following attributes:<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>M</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> <span class=SpellE>odel</span> based<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>O</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> pen for extension<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>G</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> <span class=SpellE>enerator</span> based<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>Li</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> <span class=SpellE>ghtweight</span><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Current
version: 1.1.0<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<h1><span lang=EN-GB style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Content<o:p></o:p></span></h1>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c1">Why is <span
class=SpellE>MOGLiCC</span> lightweight?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c2">Why is <span
class=SpellE>MOGLiCC</span> open?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c3">How does <span
class=SpellE>MOGLiCC</span> work?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c4">How to apply <span
class=SpellE>MOGLiCC</span>?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.1 <a href="#c4_1">Writing a model file</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.2 <a href="#c4_2">Writing a template file</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.3 <a href="#c4_3">The <span class=SpellE>MetaInfo</span>
Validation Feature</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.4 <a href="#c4_4"><span class=SpellE>VelocityClassBasedGenerator</span>
vs. <span class=SpellE>VelocityModelBasedInserter</span></a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c5">Example case: The <span
class=SpellE>MOGLiCC</span> JavaBean Group</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c6">How is <span
class=SpellE>MOGLiCC</span> designed?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c7">How is <span
class=SpellE>MOGLiCC</span> implemented?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c8">What are the benefits
of <span class=SpellE>autogenerating</span> source code?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c9">Road Map</a><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c1><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>1. Why is </span></b></a><span class=SpellE><span style='mso-bookmark:
c1'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c1'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
lightweight?<o:p></o:p></span></b></span></p>

<span style='mso-bookmark:c1'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
several aspects that illustrate the lightweight character of the <span
class=SpellE>MOGLi</span> Code Creator: <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
<span class=SpellE>programm</span> size which is only a few megabytes, <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
small number of prerequisites to run it - which is one: a Java 1.6 Runtime, <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
tooling needed to work with it - which is a simple text editor, and <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
main reason:<span style='mso-spacerun:yes'>  </span>the small knowledge you
need to learn to work with it.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>With the
simplest application form (See 4. <span class=GramE>How to apply <span
class=SpellE>MOGLiCC</span>?)</span> <span class=GramE>you</span> only need to
define your classes by a very simple DSL and you are able to create all java
classes for the <span class=SpellE>MOGLiCC</span> JavaBean Group (See 5. <span
class=GramE>Example Case).</span><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c2><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>2. Why is </span></b></a><span class=SpellE><span style='mso-bookmark:
c2'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c2'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
open?</span></b></span><b><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Firstly,
because it is open for extension by plugins. <span class=GramE>Secondly,
because it is open source.</span> Therefore, feel free to have a look at the <span
class=SpellE>moglicc</span> sources at <span class=SpellE>GitHub</span>. The <span
class=SpellE>MOGLiCC</span> tool contains a small plugin framework that allows
loosely coupled plugins to interact with each other (for more information about
the software design see 6. How is <span class=SpellE>MOGLiCC</span> designed?).
If the standard set of functionality does not match you purpose, create your
own plugins that do. For example, it may be nice to model your domain objects
using a graphical tool. To use this graphical model with <span class=SpellE>MOGLiCC</span>,
export the object definitions as, e.g. <span class=SpellE>XHaving</span>
written an XMI-Model-Provider plugin you would be able to connect the graphical
model tool with <span class=SpellE>MOGLiCC</span> and use it without manually
defining a model.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c3><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>3. How does </span></b></a><span class=SpellE><span style='mso-bookmark:
c3'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c3'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
work?</span></b></span><b><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Think of <span
class=SpellE>MOGLiCC</span> as a reactor for two separate source code
ingredients: a model and a generator. The <span class=SpellE>MOGLiCC</span>
plugin called <span class=SpellE>StandardModelProvider</span> allows you to define
a model in a simple text file. Another <span class=SpellE>MOGLiCC</span> plugin
called <span class=SpellE>VelocityClassBasedGenerator</span> allows you to
define a template file. Now <span class=SpellE>MOGLiCC</span> works like this:
model + template = code. Therefore, <span class=SpellE>MOGLi</span> is based on
two equally important parts: model and generator.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>For the
actual merging of model and template the current plugins of <span class=SpellE>MOGLiCC</span>
use the Velocity Framework. However, you will see no Velocity source code. The
Velocity engine is created, configured and started by <span class=SpellE>MOGLiCC</span>.
You just need to feed the engine with data, i.e. templates. This means, you
have to learn the simple but powerful Velocity Template Language (VTL) if you
wish to create your own source code artefacts. If you don’t like Velocity and
its template DSL, write your own generator plugin – remember: <span
class=SpellE>MOGLi</span> is open for extension.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
three application forms of <span class=SpellE>MOGLiCC</span> that are worth <span
class=SpellE>destinguishing</span>:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Simple application: use the default
templates of the <span class=SpellE>MOGLiCC</span> JavaBean Group. To do so,
you only need to specify your model (class definitions).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Advanced application: create your
own templates to create completely new artefacts.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>c)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Expert application: write your own <span
class=SpellE>MOGLi</span> plugins, plug them into the <span class=SpellE>MOGLi</span>
Code Creator and let them do their jobs.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'> </span><span style='mso-tab-count:1'>           </span><o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c4><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4. How to apply </span></b></a><span class=SpellE><span
style='mso-bookmark:c4'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c4'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>?</span></b></span><b><span
lang=EN-GB style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The <span
class=SpellE>MOGLi</span> Code Creator is released as a zip-file. After
unzipping its content, a lib directory containing the <span class=SpellE>MOGLiCC</span>
jar files and a start batch file is present. Having set the environment
variable JAVA_HOME pointing on a 1.6 JRE, the Code Creator will do its job when
calling the start batch. When called the first time, some directories are
created and a number of default files are extracted from the jar source files.
The most important directories are “input” and “output”. For each plugin that needs
input data, the input directory contains a subdirectories named after the
plugin the data belongs to. The same is true for the output <span class=SpellE>dir</span>,
but in addition old output files are deleted on every application start. The
input directory together with the corresponding output directory can be
organized in different workspaces. The “<span class=SpellE>application.properties</span>”
file allows you to move the default workspace directory – the application root
directory – to an arbitrary file system folder. In this way, you can manage code
generation for different projects. For more information how to configure a
workspace directory read the default application properties file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>You may
wish to deactivate a certain generator plugin, because, for instance, you do
not wish its result being generated. For that purpose you can use the workspace
properties file. For more information about plugin deactivation read the
default workspace properties file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>For each
workspace, a log directory exists containing the log output of the last
application run. With every application start the old <span class=SpellE>logfiles</span>
are deleted. The main log file is named “_MOGLi.log” and contains log output of
the core module (See 6. How is <span class=SpellE>MOGLiCC</span> designed?).
For any problem analysis, the end of this file is the first place to look. Each
plugin has its own log file with additional plugin specific information.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_1"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.1 Writing a model file<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_1'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The model
file is by default expected to be found in the plugin specific input
directories of the <span class=SpellE>StandardModelProvider</span>. If only one
file is found there, it is selected automatically. Otherwise, the model file
must be defined in the model properties file. It can be used to manage more
than one model file in one workspace. For more information about model file
configuration read the default model properties file. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The whole
idea of the standard <span class=GramE>meta</span> model is, that there are
three levels: model, class and attribute. The only concrete data for each
element in each level is only “name”, i.e. for the model and each class in this
model and each attribute in all of the classes you only define a name. All
other information is defined by <span class=SpellE>MetaInfo</span> elements. <span
class=SpellE>MetaInfos</span> can be defined for the model, a class or a single
attribute. From the template file, these <span class=SpellE>MetaInfos</span>
are addressable. Hence, model file and template must match very well to have
reasonable output. The best way to understand this model is to have a look at
the default model file “DemoModel.txt”. It contains both a description of the
model definition DSL and an example, the <span class=SpellE>DemoModel</span>,
how the model DSL is used. If this file has been deleted in your current
workspace, define a new workspace in the application property file. Having
executed the application with the new workspace, the “DemoModel.txt” file will
be available there again.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_2"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.2 Writing a template file<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_2'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The plugin
specific input directories of the generator plugins <span class=SpellE>VelocityClassBasedGenerator</span>
and <span class=SpellE>VelocityModelBasedInserter</span><b> </b>contain a
number of subdirectories. These subdirectories are named after the artefact
generated from its content. The content of such a subdirectory is a list of
template files. If only one template file exist, it is taken as main template.
If more than one template file exist, there must be exactly one template file
that contains “Main” in its name. This is taken as main <span class=GramE>template,</span>
the other templates may serve as <span class=SpellE>subtemplates</span> used by
the main template or by another <span class=SpellE>subtemplate</span>. For each
subdirectory with a main template, the generator calls the Velocity engine to
merge the main template with the model.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>In case the
plugin specific input directories contains subdirectories that do not represent
artefacts, e.g. meta information of your version control system or a collection
of <span class=SpellE>subtemplates</span> used for more than one artefact, you
can tell the generator plugin to ignore such subdirectories for code generation
(See default generator properties file).<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>A main
template consists of a header and a body part. Header lines start with the
annotation symbol ‘@’. The header contains a list of artefact attributes, e.g.
name of file to create or to insert in and where to insert within the target
file. The body contains the actual content of the artefact. Both header and
body of the template file are merged with model data. This means, place holder
will be replaced by model data both in the artefact attributes and the actual
content. However, the header does not contribute to the generated content and
controls only what the plugin does with the generated content.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
artefact attributes “<span class=SpellE>FileName</span>” and “<span
class=SpellE>TargetDir</span>” determine the target file. If the target file
exists, the attribute ‘<span class=SpellE>CreateNew</span>’ controls whether
the existing file is overwritten or not. If the target file does not exist, the
inserter plugin will generate an error, the generator plugin will simply not
create a target file. In any case, however, both plugins write the generated
content into their plugin specific output dir. But after the next application
start, this output will be deleted.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The behaviour
of Velocity Template Language (VTL) concerning white space is quarrelsome,
intensively discussed and strict: leading white space is simply removed. This
is troublesome for formatting purpose. To increase the <span class=SpellE>easeness</span>
to create well formatted content, the <span class=SpellE>MOGLiCC</span>
generators apply a little parser after merging model and template. This <span
class=SpellE>MOGLiCC</span> specific parser removes leading apostrophes
&lt;’&gt; from each line of the generated content. An apostrophe prevents
Velocity from removing the whitespace that follows it. With this parser it is
possible to write both well formatted templates and well formatted generation
result. Use white space without or before an apostrophe to format only a
template line. Use white space after an apostrophe to format the generation
results.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Writing
template files, you should have in mind that different <span class=SpellE>MOGLiCC</span>
plugins contribute to the list of functions you can use when writing template
files. See <a href="StandardModelProvider/_MetaModel.htm"><span class=SpellE>StandardModelProvider</span></a>,
<a href="VelocityEngineProvider/_TemplateUtilities.htm"><span class=SpellE>VelocityEngineProvider</span></a>,
<a href="VelocityClassBasedGenerator/TemplateFileHeaderAttributes.htm"><span
class=SpellE>VelocityClassBasedGenerator</span></a> and<a
href="VelocityModelBasedInserter/TemplateFileHeaderInserterAttributes.htm"> <span
class=SpellE>VelocityModelBasedInserter</span></a> for more information.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_3"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.3 The </span></b></a><span class=SpellE><span style='mso-bookmark:
c4_3'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MetaInfo</span></b></span></span><span
style='mso-bookmark:c4_3'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
Validation Feature<o:p></o:p></span></b></span></p>

<span style='mso-bookmark:c4_3'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
advantage of the <span class=SpellE>MOGLiCC</span> Standard Model is its <span
class=SpellE>simpleness</span>, its disadvantage the large number of <span
class=SpellE>MetaInfo</span> elements and the danger to lose the overview which
<span class=SpellE>MetaInfo</span> element is really being used. This is one
reason for the <span class=SpellE>MetaInfo</span> Validation Feature. A second
reason is the importance specific <span class=SpellE>MetaInfo</span> elements
can have, for instance, without a <span class=SpellE>MetaInfo</span> element “<span
class=SpellE>JavaType</span>” it would not be possible to build a JavaBean
artefact with a reasonable content. It would be good to assure that for all
classes in the model a java type is defined.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Therefore
the existing generator plugins implement the interface <span class=SpellE>MetaInfoValidatorVendor</span>
and its method “<span class=SpellE><span class=GramE>getMetaInfoValidatorList</span></span><span
class=GramE>(</span>)”. <span class=SpellE>MetaInfoValidators</span> are
defined in the <span class=SpellE>MetaInfo</span> validation file called “<span
class=SpellE>MetaInfo.validation</span>”. This file is located in the plugin
input directory of the generator plugin. For more information how to define <span
class=SpellE>MetaInfoValidators</span>, see the default <span class=SpellE>MetaInfo</span>
validation file. The <span class=SpellE>StandardModelProvider</span> collects
all of these <span class=SpellE>MetaInfoValidators</span> and uses this
information for two purposes: 1. to throw an exception if a mandatory <span
class=SpellE>MetaInfo</span> element is missing and 2. <span class=GramE>to</span>
create a statistics file that informs which <span class=SpellE>MetaInfo</span>
element is used in which context and that warns if a <span class=SpellE>MetaInfo</span>
element or a <span class=SpellE>MetaInfo</span> Validator is unused. You find
this statistics file in the plugin output directory of the <span class=SpellE>StandardModelProvider</span>.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_4"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.4 </span></b></a><span class=SpellE><span style='mso-bookmark:c4_4'><b><span
lang=EN-GB style='mso-ansi-language:EN-GB'>VelocityClassBasedGenerator</span></b></span></span><span
style='mso-bookmark:c4_4'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
vs. <span class=SpellE>VelocityModelBasedInserter</span><o:p></o:p></span></b></span></p>

<span style='mso-bookmark:c4_4'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
three differences between these two generators. First, only the inserter can
insert into existing files, whereas the generator can only create new files. Second,
the artefact attribute “<span class=SpellE>TargetDir</span>” is mandatory for
the inserter but not so for the generator. Third, “class based” means, that for
each class defined in the model file an artefact output file, e.g. a JavaBean,
is created. “Model based” means that an insertion is made for the whole model
in only one existing file (or only one artefact output file is created). <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>5. <a
name=c5>Example case: The </a><span class=SpellE><span style='mso-bookmark:
c5'>MOGLiCC</span></span><span style='mso-bookmark:c5'> JavaBean Group </span><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
probably most typical example for code generation is to create simple data
classes, in Java, JavaBeans. Therefore, <span class=SpellE>MOGLiCC</span> comes
with a set of default templates for generating a number of artefacts that
closely belong together: The <span class=SpellE>MOGLiCC</span> JavaBean Group.
This group of artefacts consists of a JavaBean class, a builder class for easy
creation of JavaBean instances with example data, a validator class to check a
JavaBean instance for valid data and two <span class=SpellE>JUnit</span> test
classes to demonstrate that the generated code is runnable and works without
errors. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Because
these JavaBean Group artefacts need to be created for each class within the
model, the templates are default input files of the <span class=SpellE>VelocityClassBasedGenerator</span>
plugin. If you do not like defining your own model, you can use the default
model file “DemoModel.txt” which describes a few arbitrary objects just for
illustration purpose. After starting the <span class=SpellE>MOGLiCC</span>
application you find the generated artefacts in “&lt;<span class=SpellE>workspaceDir</span>&gt;/output/
<span class=SpellE>VelocityClassBasedGenerator</span>”. Create a test project
and move the generated java files into it. Then, you are able to execute the <span
class=SpellE>JUnit</span> test cases.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The most
complex class is the JavaBean. It is by default created with the following
methods: <span class=SpellE>toString</span>, <span class=SpellE>hashcode</span>,
equals and compare. If the <span class=SpellE>Clonable</span> interface is
found in the class definition, the clone method is additionally generated. If
the <span class=SpellE>Serializable</span> interface is found in the class
definition, a <span class=SpellE>SerialVersionUID</span> is generated. To
assure <span class=SpellE>maintainablity</span> the JavaBean main template uses
a large number of <span class=SpellE>subtemplates</span>. Some of them even use
further <span class=SpellE>subtemplates</span>. If you wish to study the
Velocity Template Language (VTL), the templates of the <span class=SpellE>MOGLiCC</span>
JavaBean Group provide a lot of snippets to learn from. Generally, you find the
VTL <span class=SpellE>refererence</span> guide here: <a
href="http://velocity.apache.org/engine/devel/vtl-reference-guide.html">http://velocity.apache.org/engine/devel/vtl-reference-guide.html</a>.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c6><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>6. How is </span></b></a><span class=SpellE><span style='mso-bookmark:
c6'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c6'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
designed?<o:p></o:p></span></b></span></p>

<span style='mso-bookmark:c6'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The basic
principle in designing the <span class=SpellE>MOGLi</span> Code Creator was
“Loosely coupling”. Following the article “<span class=SpellE>Raus</span> <span
class=SpellE>aus</span> der Dependency <span class=SpellE>Hölle</span> – das <span
class=SpellE>fachliche</span> <span class=SpellE>offene</span>
Dependency-Management” the <span class=SpellE>MOGLiCC</span> architecture is
component-oriented and the application consists of a number of different
components. Five of them represent business logic components – in terms of the
article: “<span class=SpellE>fachliche</span> <span class=SpellE>Komponenten</span>”.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The heart
of the application is the business logic component “core” which actually
represents a container for <span class=SpellE>MOGLiCC</span> plugins. With each
application start, a special plugin folder is scanned for jar-files that contain
a file named “<span class=SpellE>mogli.properties</span>”. From this file a
fully qualified name of the plugin starter class is read and used to
instantiate the starter class via reflection. The starter classes of all
plugins are cast on the common <span class=SpellE>MOGLiCC</span> interface type
“<span class=SpellE>MOGLiPlugin</span>”. After loading the starter classes, the
core component analyses the dependencies defined by the “<span class=SpellE>getDependencies</span>”
method each <span class=SpellE>MOGLiPlugin</span> implements. If all
dependencies are resolvable the plugins are sorted in the execution order. In
this way it is guaranteed that, for instance<span class=GramE>,<span
style='mso-spacerun:yes'>  </span>the</span> model provider is always executed
before the generators.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The four
other business logic components are the four plugins <span class=SpellE>StandardModelProvider</span>,
<span class=SpellE>VelocityEngineProvider</span>, <span class=SpellE>VelocityClassBasedGenerator</span>
and <span class=SpellE>VelocityModelBasedInserter</span>. Before executing
these plugins, the core prepares each plugin for execution and sets an
infrastructure service object to each plugin. This service provides
infrastructure functionality to the plugins such as “<span class=SpellE><span
class=GramE>getPluginInputDir</span></span><span class=GramE>(</span>)” or “<span
class=SpellE>getModelProvider</span>(id)”. Finally, the core calls the <span
class=SpellE>MogliPlugin</span> method “<span class=SpellE><span class=GramE>doYourJob</span></span><span
class=GramE>(</span>)” for each plugin to execute it.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The core
component has two more responsibilities. First, it checks whether a help
directory exists for each plugin. If not, the core triggers the corresponding
plugin to extract its embedded help files. Second, the core checks whether an
input directory exists for each plugin. If not, the core triggers the
corresponding plugin to extract its embedded default input files. In this way,
a number of directories and files are created when the application was started
the first time.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
four basic <span class=SpellE>MOGLiCC</span> plugin types. 1. <span
class=SpellE>ModelProvider</span>, 2. <span class=SpellE><span class=GramE>EngineProvider</span></span><span
class=GramE>, 3.</span> <span class=GramE>Generator and 4.</span> <span
class=SpellE><span class=GramE>DataProvider</span></span><span class=GramE>.</span><span
style='mso-spacerun:yes'>  </span>The <span class=SpellE>StandardModelProvider</span>
is of course a <span class=SpellE>ModelProvider</span>; <span class=SpellE>VelocityEngineProvider</span>
an <span class=SpellE>EngineProvider</span>; <span class=SpellE>VelocityClassBasedGenerator</span>
and <span class=SpellE>VelocityModelBasedInserter</span> are Generators.
“Inserter” is a subtype of a “Generator”. A <span class=SpellE>DataProvider</span>
is currently not yet implemented.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>An <span
class=SpellE>EngineProvider</span> typically represents a plugin without an own
input and output directory. It does nothing when called directly from the core.
The <span class=SpellE>VelocityEngineProvider</span> creates, configures and
actually starts a velocity engine automatically. Thus, the generator plugins
using the <span class=SpellE>VelocityEngineProvider</span> have nothing to do
with any Velocity code. A generator plugin uses an <span class=SpellE>EngineProvider</span>
by setting a specific <span class=SpellE>EngineData</span> object to the <span
class=SpellE>EngineProvider</span> and triggers it to start the engine. The <span
class=SpellE>EngineData</span> gives the <span class=SpellE>EngineProvider</span>
all information necessary for the generation, i.e. the model and the
template(s). Having done its job the <span class=SpellE>EngineProvider</span>
returns a specific <span class=SpellE>ResultData</span> object to the generator
which contains all information for the generator to create the output files.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c7><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>7. How is </span></b></a><span class=SpellE><span style='mso-bookmark:
c7'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLiCC</span></b></span></span><span
style='mso-bookmark:c7'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
implemented?<o:p></o:p></span></b></span></p>

<span style='mso-bookmark:c7'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The author
of the <span class=SpellE>moglicc</span> source code followed the principles of
the clean code developer (<a href="http://www.clean-code-developer.de/">http://www.clean-code-developer.de</a>).
One rule of the clean code developers is “Test first”. To apply this rule, the
source code author also followed the Test Driven Development method of “Growing
Object-Oriented Software, Guided by Tests” by Freeman &amp; Pryce. Thus, the <span
class=SpellE>MOGLiCC</span> functionality of version 1.1.0 is regularly and
automatically tested by 336 unit tests (70-90% coverage), 23 integration tests (10-40%
coverage) and 30 system tests. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c8><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>8. What are the benefits of </span></b></a><span class=SpellE><span
style='mso-bookmark:c8'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>autogenerating</span></b></span></span><span
style='mso-bookmark:c8'><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>
source code?</span></b></span><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There is
only one final purpose of code <span class=SpellE>autogeneration</span>:
speeding up software development. To gain this final benefit, two aspects are
important to have in mind:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>The benefit increases with the
amount of “parallel functionality”. If a specific design concept is used again
and again, parallel functionality exists, for instance, a number of modules or
components with a similar internal structure to be embedded in a similar
environment. The higher the number of components (repetitions of the parallel
functionality) and the higher the complexity of the parallel functionality, the
higher is the benefit of <span class=SpellE>autogeneration</span>. Is this
complexity low (let’s say, only a few lines in one file are needed to be
generated) the number of repetitions must be very high to benefit from <span
class=SpellE>autogeneration</span>. Is the complexity high (many lines in many
different files) the benefit starts at least with the third “parallel
component” (the second repetition). If you foresee sufficient complexity and
repetitions of parallel functionality, start using <span class=SpellE>autogenerating</span>
with the first repetition.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>There are three proximate benefits
that contribute to the final one: <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>I)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>Reduction
of non-creative coding effort. <o:p></o:p></span></p>

<p class=MsoBodyTextIndent style='margin-left:42.55pt;text-indent:-21.25pt;
tab-stops:42.55pt'><span lang=EN-GB><span style='mso-tab-count:1'>       </span>Given
some minutes to write, extend or modify a model, you generate the code within
seconds. In contrast, the manual typing of the code may cost hours of
development time even if the programmer(s) exactly know where to create which
code.</span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>II)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Reduction of costs for fixing stupid
bugs. <o:p></o:p></span></p>

<p class=MsoBodyTextIndent style='margin-left:42.55pt;text-indent:-21.25pt;
tab-stops:42.55pt'><span lang=EN-GB><span style='mso-tab-count:1'>       </span>Typically,
there are three types of stupid errors caused by programming parallel
functionality manually. 1. copy-paste-errors, 2. <span class=GramE>misspelled</span>
expressions and 3. <span class=GramE>forgotten</span> source locations where an
adaptation is necessary. Cost of bug fixing can increase the coding effort
dramatically and fixing stupid errors decreases the motivation of the most
developers. In contrast, learning to control an <span class=SpellE>autogeneration</span>
tool is fun for many developers.</span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>III)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Documentation of “How to” knowledge<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;tab-stops:
42.55pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><span
style='mso-tab-count:1'>       </span>Have you ever heard a statement like
“Source code is the best documentation”. This may be true for clean code in its
best appearance. However, source code is frequently the only documentation. Now
imagine a team of developers which has designed and implemented a complex
system. The team members change and after a while the knowledge how to set up a
new module in the system dies away. <span class=GramE>Familiar situation?</span>
Given the system is developed by the <span class=SpellE>MOGLi</span> Code Creator,
the developer simply study the templates for the artefacts generated by the <span
class=SpellE>VelocityClassBasedGenerator</span> and the insertions done by the <span
class=SpellE>VelocityModelBasedInserter</span> and the knowledge where to
create which code is quickly available. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:35.4pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:35.4pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c9><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>9. Road Map<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c9'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>What’s
next? There are two limitations known: <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>a) Input
file are read using UTF-8 encoding. To represent symbols which are not represented
by UTF-8, <span class=SpellE>unicode</span> notation may help. However there is
currently no possibility to translate Unicode into the <span class=SpellE>OutputEncodingFormat</span>
defined in the template file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>b) The
support for Utility methods within template files is limited. A <span
class=SpellE>TemplateJavaUtility</span> and a <span class=SpellE>TemplateStringUtility</span>
currently exist with a certain set of methods. This limitation may be removed
by the possibility to provide a customized utility class that is defined by the
user within a generator plugin and transferred during runtime to the <span
class=SpellE>VelocityEngineProvider</span> where it is added to the Velocity
engine so that the utility’s methods can be used in the templates in the same
way as the existing utilities are used.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Furthermore,
following extensions are planned:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>c)<span
style='mso-tab-count:1'>  </span>A new generator possibly called ‘<span
class=SpellE>ModelBasedFolderCreator</span>’ to create for each artefact a
complete file structure (folder with subfolders and files). <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>d)<span
style='mso-tab-count:1'> </span>An artefact for the ‘<span class=SpellE>ModelBasedFolderCreator</span>’
to generate a complete new maven project for a new <span class=SpellE>MOGLiCC</span>
plugin. This will additionally speed up the development of new <span
class=SpellE>MOGLiCC</span> plugins.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>e)<span
style='mso-tab-count:1'>  </span>An artefact for the ‘<span class=SpellE>ModelBasedFolderCreator</span>’
to generate a complete new maven project for <span class=GramE>a the</span> <span
class=SpellE>MOGLiCC</span>-JavaBean-Group.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>f)<span
style='mso-tab-count:1'>  </span>A new <span class=SpellE>MOGLiPlugin</span>
with the plugin type ‘<span class=SpellE>DataProvider</span>’ that provides a
way to define many sets of sample data which are accessible for other plugins.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>g)<span
style='mso-tab-count:1'>  </span>New <span class=SpellE>TemplateUtility</span>
for <span class=SpellE>VelocityEngineData</span> to make the sample data of the
<span class=SpellE>DataProvider</span> accessible from the template files.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>h)<span
style='mso-tab-count:1'>  </span>A new <span class=SpellE>aretefact</span> for
the <span class=SpellE>VelocityClassBasedGenerator</span> called ‘<span
class=SpellE>JavaBeanFactory</span>’ to create a factory for various JavaBean
instances with reasonable sample data.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
