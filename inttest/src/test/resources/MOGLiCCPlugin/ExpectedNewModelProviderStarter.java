package com.iksgmbh.moglicc.generator.classbased.velocity;

import java.io.File;
import java.util.List;

import com.iksgmbh.moglicc.core.InfrastructureService;
import com.iksgmbh.moglicc.exceptions.MOGLiPluginException;
import com.iksgmbh.moglicc.generator.utils.*;
import com.iksgmbh.moglicc.plugin.type.*;
import com.iksgmbh.moglicc.plugin.type.basic.*;
import com.iksgmbh.moglicc.provider.model.standard.Model;
import com.iksgmbh.moglicc.provider.model.standard.metainfo.*;
import com.iksgmbh.utils.ImmutableUtil;
import com.iksgmbh.moglicc.generator.utils.helper.*;
import com.iksgmbh.utils.FileUtil;

/**
* Raw draft of the starter class of the MyModelProvider plugin.
* TODO: Complete the implementation manually.
* @author generated by MOGLi Code Creator
*/
public class NewModelProviderStarter implements ModelProvider {

	public static final String PLUGIN_ID = "MyModelProvider";
	public static final String MODEL_PROVIDER_ID = "StandardModelProvider";
	public static final String ENGINE_PROVIDER_ID = "VelocityEngineProvider";

	public static final String PLUGIN_PROPERTIES_FILE = "generator.properties";
	public static final String MAIN_TEMPLATE_IDENTIFIER = "Main";

	private InfrastructureService infrastructure;

	@Override
	public void setMOGLiInfrastructure(final InfrastructureService infrastructure) {
		this.infrastructure = infrastructure;
	}

	@Override
	public void doYourJob() throws MOGLiPluginException {
		infrastructure.getPluginLogger().logInfo("Doing my job...");

		//  TODO: implement here the plugin's job

		infrastructure.getPluginLogger().logInfo("Done!");
	}


	String findMainTemplate(final File templateDir) throws MOGLiPluginException {
		return TemplateUtil.findMainTemplate(templateDir, MAIN_TEMPLATE_IDENTIFIER);
	}

	@Override
	public boolean unpackDefaultInputData() throws MOGLiPluginException {
		return false;
	}

	@Override
	public PluginType getPluginType() {
		return PluginType.MODEL_PROVIDER;
	}

	@Override
	public String getId() {
		return PLUGIN_ID;
	}

	@Override
	public List<String> getDependencies() {
		return ImmutableUtil.getImmutableListOf();
	}


	@Override
	public InfrastructureService getMOGLiInfrastructure() {
		return infrastructure;
	}

	@Override
	public boolean unpackPluginHelpFiles() throws MOGLiPluginException {
		return false;
	}

	@Override
	public Model getModel() throws MOGLiPluginException {
		// TODO: provide model hier
		return null;
	}

}