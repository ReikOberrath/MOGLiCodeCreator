package com.iksgmbh.moglicc.generator.classbased.velocity;

import java.io.File;
import java.util.List;

import com.iksgmbh.moglicc.core.InfrastructureService;
import com.iksgmbh.moglicc.exceptions.MOGLiPluginException;
import com.iksgmbh.moglicc.generator.utils.*;
import com.iksgmbh.moglicc.plugin.type.*;
import com.iksgmbh.moglicc.plugin.type.basic.*;
import com.iksgmbh.moglicc.provider.model.standard.Model;
import com.iksgmbh.moglicc.provider.model.standard.metainfo.*;
import com.iksgmbh.utils.ImmutableUtil;
import com.iksgmbh.moglicc.generator.utils.helper.*;
import com.iksgmbh.utils.FileUtil;

/**
* Raw draft of the starter class of the MyGenerator plugin.
* TODO: Complete the implementation manually.
* @author generated by MOGLi Code Creator
*/
public class NewGeneratorStarter implements Generator, MetaInfoValidatorVendor {
	private int generationCounter = 0;
	private int artefactCounter = 0;
	private StringBuffer generationReport = new StringBuffer(PLUGIN_ID
                                                             + " has done the following work:"
                                                            + FileUtil.getSystemLineSeparator());


	public static final String PLUGIN_ID = "MyGenerator";
	public static final String MODEL_PROVIDER_ID = "StandardModelProvider";
	public static final String ENGINE_PROVIDER_ID = "VelocityEngineProvider";

	public static final String PLUGIN_PROPERTIES_FILE = "generator.properties";
	public static final String MAIN_TEMPLATE_IDENTIFIER = "Main";

	private InfrastructureService infrastructure;

	@Override
	public void setMOGLiInfrastructure(final InfrastructureService infrastructure) {
		this.infrastructure = infrastructure;
	}

	@Override
	public void doYourJob() throws MOGLiPluginException {
		infrastructure.getPluginLogger().logInfo("Doing my job...");

		//  TODO: implement here the plugin's job

		infrastructure.getPluginLogger().logInfo("Done!");
	}


	List<String> getArtefactList() throws MOGLiPluginException {
		final File generatorPropertiesFile = new File(infrastructure.getPluginInputDir(), PLUGIN_PROPERTIES_FILE);
		return ArtefactListUtil.getArtefactListFrom(infrastructure.getPluginInputDir(), generatorPropertiesFile);
	}

	String findMainTemplate(final File templateDir) throws MOGLiPluginException {
		return TemplateUtil.findMainTemplate(templateDir, MAIN_TEMPLATE_IDENTIFIER);
	}

	@Override
	public boolean unpackDefaultInputData() throws MOGLiPluginException {
		infrastructure.getPluginLogger().logInfo("initDefaultInputData");
		final PluginPackedData defaultData = new PluginPackedData(this.getClass(), DEFAULT_DATA_DIR);

		//  TODO: add defaultData files here

		PluginDataUnpacker.doYourJob(defaultData, infrastructure.getPluginInputDir(), infrastructure.getPluginLogger());
		return true;
	}

	@Override
	public PluginType getPluginType() {
		return PluginType.GENERATOR;
	}

	@Override
	public String getId() {
		return PLUGIN_ID;
	}

	@Override
	public List<String> getDependencies() {
		return ImmutableUtil.getImmutableListOf(MODEL_PROVIDER_ID, ENGINE_PROVIDER_ID);
	}

	@Override
	public List<MetaInfoValidator> getMetaInfoValidatorList() throws MOGLiPluginException {
		final File validationInputFile = new File(infrastructure.getPluginInputDir(),
				                                  MetaInfoValidationUtil.FILENAME_VALIDATION);
		return MetaInfoValidationUtil.getMetaInfoValidatorList(validationInputFile, getId());
	}

	@Override
	public InfrastructureService getMOGLiInfrastructure() {
		return infrastructure;
	}

	@Override
	public boolean unpackPluginHelpFiles() throws MOGLiPluginException {
		infrastructure.getPluginLogger().logInfo("unpackPluginHelpFiles");
		final PluginPackedData helpData = new PluginPackedData(this.getClass(), HELP_DATA_DIR);

		//  TODO: add help files here

		PluginDataUnpacker.doYourJob(helpData, infrastructure.getPluginHelpDir(), infrastructure.getPluginLogger());
		return true;
	}

	@Override
	public String getGenerationReport() {
		return generationReport.toString().trim();
	}

	@Override
	public int getNumberOfGenerations() {
		return generationCounter;
	}

	@Override
	public int getNumberOfArtefacts() {
		return artefactCounter;
	}

	private void generateReportLines(final String artefact) {
		artefactCounter++;
		generationReport.append(FileUtil.getSystemLineSeparator());
		generationReport.append(GeneratorReportUtil.getArtefactReportLine(artefact));
		generationReport.append(FileUtil.getSystemLineSeparator());

		// TODO add details here and call method from where it makes sense
	}

	List<String> getArtefactList() throws MOGLiPluginException {
		final File generatorPropertiesFile = new File(infrastructure.getPluginInputDir(), PLUGIN_PROPERTIES_FILE);
		return ArtefactListUtil.getArtefactListFrom(infrastructure.getPluginInputDir(), generatorPropertiesFile);
	}


}